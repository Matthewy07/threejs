import {OrbitControls} from '/three/examples/jsm/controls/OrbitControls.js';
import {GLTFLoader} from '/three/examples/jsm/loaders/GLTFLoader.js';
import * as THREE from '/three/build/three.module.js';
import { EffectComposer } from '/three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from "/three/examples/jsm/postprocessing/RenderPass.js"
import { OutlinePass } from "/three/examples/jsm/postprocessing/OutlinePass.js";
import { DRACOLoader } from "/three/examples/jsm/loaders/DRACOLoader.js";

let conta= document.querySelector("#cont");


let scene = new THREE.Scene();
let camera= new THREE.PerspectiveCamera(80,conta.clientWidth/conta.clientHeight,0.1,1000);
let raycaster = new THREE.Raycaster();
let mouse = new THREE.Vector2();
let light = new THREE.AmbientLight(0xffffff,10);

let manager = new THREE.LoadingManager();

manager.onStart =()=>{
    console.log("Building started");
}

//raycaster.layers.set(1);
//let shoeParts =[];
let shoeNames;

manager.onLoad =() =>{

    scene.traverse((sho)=>{

        if(sho.type ="Object3D" && sho.name == "Plane050"){
            console.log(sho);
            shoeNames = sho;
        }
    })
};




let dracoLoader = new DRACOLoader();
dracoLoader.setDecoderPath("/three/examples/js/libs/draco");

let loader = new GLTFLoader(manager);
loader.setDRACOLoader(dracoLoader);

let renderer = new THREE.WebGLRenderer();

renderer.setSize(conta.clientWidth,conta.clientHeight);
scene.background= new THREE.Color("0x00ff00");
conta.appendChild(renderer.domElement);


let composer = new EffectComposer(renderer);
let renderPass = new RenderPass(scene,camera);
composer.addPass(renderPass);

let outlinePass = new OutlinePass(new THREE.Vector2( conta.clientWidth, conta.clientHeight ), scene, camera);
console.log(outlinePass);
outlinePass.renderToScreen = true;
composer.addPass(outlinePass);

let control = new OrbitControls(camera,renderer.domElement);

scene.add(light);

let shoes;
        loader.load("../shooes.gltf",(gltf)=>{
    
            //gltf.scene.children[0].rotation.x=180;
            shoes = gltf.scene;
            scene.add(gltf.scene);	
            
        });
  

    //sho.material = new THREE.MeshBasicMaterial({color:0x00ff00}); // Changing color of shoes
    //Merge > Verticise > By Distance



camera.position.z =300;  //Postion of VIEW
camera.position.y =100;  //Position of VIEW
camera.position.x=-300;

console.log(scene.children);

function animate(){

    requestAnimationFrame(animate);
    control.update();

      /* scene.traverse((val) =>{
           

            val.childrenscale.set(0.1,0.1,0.1);
            val.rotation.y +=1;
            val.rotation.z +=1;
            
           
       });*/
     
       composer.render();
    
}

animate();


window.addEventListener("resize",()=>{

    camera.aspect = conta.clientWidth/conta.clientHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(conta.clientWidth,conta.clientHeight);
   
},false);


function mouseEvent(e){

    mouse.x=(e.clientX/window.innerWidth)*2-1;
    mouse.y=-(e.clientY/window.innerHeight)*2+1;


    raycaster.setFromCamera(mouse,camera);
    
    let intersect = raycaster.intersectObjects(shoeNames.children);
  
    
    if(intersect.length > 0){

        let zero = intersect[0].object;
        console.log(zero.name);

        outlinePass.selectedObjects =[zero];
       
            //let parent = zero.parent;
           // parent.remove(zero);            //WAY to remove parts of an object,THANKS MATE
        
        
    }

 else{
    outlinePass.selectedObjects=[];
 }
    
}

window.addEventListener("click",mouseEvent);
